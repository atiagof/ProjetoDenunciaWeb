@model string
@using WebDenunciaSSP.CommonLibs.Helper
@{
    EditorTemplateConfiguration config = new EditorTemplateConfiguration(ViewData);
}
<div class="form-group @ViewData["cssclass"] @(!config.HasValidation ? "" : "has-feedback")" ng-class="{ 'has-error': @(config.Invalid) && @(config.Touched) && @config.HasValidation.ToString().ToLower(), 'has-success': @(config.Valid) && @(config.Touched) && @config.HasValidation.ToString().ToLower()}">
    <label for="@config.FieldId">
        @ViewData.ModelMetadata.DisplayName
        @if (ViewData.ModelMetadata.IsRequired)
        {
            <span style="color:red;">*</span>
        }
        else if (ViewData["ng_required"] != null)
        {
            <span style="color:red;" ng-if="@ViewData["ng_required"]">*</span>
        }
    </label>
    <div class="input-group col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <input class="form-control"
               ng-class="@Html.Raw(config.HasValidation? "" : "{ 'has-error': @(config.Invalid) && @(config.Touched), 'has-success': @(config.Valid) && @(config.Touched) }"))"
               id="@config.FieldId"
               name="@config.FieldName"
               ng-model="@config.FieldId"
               ng-init="@config.FieldId=@("'" + ViewData.Model + "'")"
               type="text"
               @Html.Raw(config.NgRequired)
               @ViewData["readonly"]
               

               @*@(ViewData["ng_disabled"] == null? "": "ng-disabled=" + ViewData["ng_disabled"])
               @(ViewData["ng_change"] == null? "": "ng-change=" + ViewData["ng_change"])
               @(ViewData["ui_mask"] == null? "": "ui-mask=" + ViewData["ui_mask"])*@
               @Html.Raw(config.UIMask)
               value="@ViewData.Model"
               @(ViewData.ModelMetadata.IsRequired ? "required" : "")
               ng-focus="@(config.Focus) = true;@ViewData["ng_focus"]"
               ng-blur="@(config.Focus) = false; @ViewData["ng_blur"]" />
        @if (config.HasValidation)
        {
            <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true" ng-show="!@(config.Pending) && @(config.Valid) && @(config.Touched)"></span>
            <span class="glyphicon glyphicon-info-sign form-control-feedback" aria-hidden="true" ng-show="!@(config.Pending) && @(config.Invalid) && @(config.Touched)"></span>
            <span class="glyphicon glyphicon-refresh form-control-feedback" aria-hidden="true" ng-show="@(config.Pending) && @(config.Touched)"></span>

        }
    </div>
    @if (config.HasValidation)
    {
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 popoverMessageValidator" ng-show="@(config.Touched) && @(config.Invalid) && (isMobile || @(config.Focus))">
            <div ng-class="{'popover bottom': !isMobile }" class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="arrow"></div>
                @*ToDo: Implementar diversos tipos de validação.*@
                <div ng-class="{'popover-content': !isMobile }">
                    <div ng-messages="@(config.Error)" style="color:maroon" role="alert">
                        <div class="alert alert-danger" role="alert" ng-message="required"><i class="glyphicon glyphicon-info-sign"></i> Campo Obrigatório</div>
                        <div class="alert alert-danger" role="alert" ng-message="mask"><i class="glyphicon glyphicon-info-sign"></i> Formato inválido</div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>