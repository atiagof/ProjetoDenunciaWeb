@{
    Func<ModelMetadata, bool> shouldShow = metadata =>
    {
        return metadata.ShowForEdit
            //&& metadata.ModelType != typeof(System.Data.EntityState)
            && !metadata.IsComplexType
            && !ViewData.TemplateInfo.Visited(metadata);
    };
}
@*@if (ViewData.TemplateInfo.TemplateDepth > 1)
{
    if (Model == null)
    {
        @ViewData.ModelMetadata.NullDisplayText
    }
    else
    {
        @ViewData.ModelMetadata.SimpleDisplayText
    }
}
else
{*@
    @foreach (var prop in ViewData.ModelMetadata.Properties.Where(shouldShow))
    {
        if(prop.PropertyName == "ModuleName" ||
            prop.PropertyName == "EntityName" ||
            prop.PropertyName == "ModelName" ||
            prop.PropertyName == "SelectFields")
        {
            continue;
        }

        if (prop.HideSurroundingHtml)
        {
            @Html.Editor(prop.PropertyName)
        }
        else
        {
            var labelHtml = Html.Label(prop.PropertyName);
            if (!string.IsNullOrEmpty(labelHtml.ToHtmlString()))
            {
                <div class="editor-label">
                    @labelHtml
                </div>
            }
            <div class="editor-field">
                @Html.Editor(prop.PropertyName)
            </div>
        }
    }
@*}*@